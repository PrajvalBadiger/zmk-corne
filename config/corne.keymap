/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };

        mht: mht {
            compatible = "zmk,behavior-hold-tap";
            label = "MHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        cut {
            bindings = <&kp LC(X)>;
            require-prior-idle-ms = <125>;
            key-positions = <25 26>;
        };

        copy {
            bindings = <&kp LC(INS)>;
            require-prior-idle-ms = <125>;
            key-positions = <27 26>;
        };

        paste {
            bindings = <&kp LS(INS)>;
            require-prior-idle-ms = <125>;
            key-positions = <28 27>;
        };

        at {
            bindings = <&kp AT>;
            require-prior-idle-ms = <125>;
            key-positions = <2 1>;
        };

        hash {
            bindings = <&kp HASH>;
            require-prior-idle-ms = <125>;
            key-positions = <2 3>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            require-prior-idle-ms = <125>;
            key-positions = <3 4>;
        };

        percent {
            bindings = <&kp PERCENT>;
            require-prior-idle-ms = <125>;
            key-positions = <4 5>;
        };

        cart {
            bindings = <&kp CARET>;
            require-prior-idle-ms = <125>;
            key-positions = <6 7>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            require-prior-idle-ms = <125>;
            key-positions = <16 17>;
        };

        star {
            bindings = <&kp STAR>;
            require-prior-idle-ms = <125>;
            key-positions = <28 29>;
        };

        plus {
            bindings = <&kp PLUS>;
            require-prior-idle-ms = <125>;
            key-positions = <9 10>;
        };

        delete {
            bindings = <&kp DELETE>;
            require-prior-idle-ms = <125>;
            key-positions = <10 11>;
        };

        underscore {
            bindings = <&kp UNDER>;
            require-prior-idle-ms = <125>;
            key-positions = <18 19>;
        };

        minus {
            bindings = <&kp MINUS>;
            require-prior-idle-ms = <125>;
            key-positions = <30 31>;
        };

        left_para {
            bindings = <&kp LEFT_PARENTHESIS>;
            require-prior-idle-ms = <125>;
            key-positions = <19 20>;
        };

        right_para {
            bindings = <&kp RIGHT_PARENTHESIS>;
            require-prior-idle-ms = <125>;
            key-positions = <20 21>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            require-prior-idle-ms = <125>;
            key-positions = <31 32>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            require-prior-idle-ms = <125>;
            key-positions = <32 33>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            require-prior-idle-ms = <125>;
            key-positions = <8 7>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            require-prior-idle-ms = <125>;
            key-positions = <8 9>;
        };

        pipe {
            bindings = <&kp PIPE>;
            require-prior-idle-ms = <125>;
            key-positions = <21 22>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            require-prior-idle-ms = <125>;
            key-positions = <33 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E                &kp R           &kp T                 &kp Y                   &kp U           &kp I                   &kp O    &kp P     &kp BSPC
&kp ESC    &kp A  &kp S  &ht LEFT_ALT D       &ht LEFT_GUI F  &kp G                 &kp H                   &ht LEFT_GUI J  &ht LEFT_ALT K          &kp L    &kp SEMI  &kp ENTER
&kp LCTRL  &kp Z  &kp X  &kp C                &kp V           &kp B                 &kp N                   &kp M           &kp COMMA               &kp DOT  &kp FSLH  &kp SINGLE_QUOTE
                         &ht LEFT_GUI ESCAPE  &mht 1 SPACE    &ht LEFT_SHIFT TAB    &ht LEFT_CONTROL ENTER  &mht 2 SPACE    &ht LEFT_ALT BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB  &kp N1  &kp N2  &kp N3  &kp N4         &kp N5                &kp N6    &kp N7         &kp N8       &kp N9     &kp N0                &kp C_MUTE
&trans   &trans  &trans  &trans  &kp BACKSPACE  &kp ENTER             &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP
&trans   &trans  &trans  &trans  &kp DELETE     &kp LA(LC(DELETE))    &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp C_BRIGHTNESS_DEC  &kp C_VOL_DN
                         &trans  &trans         &trans                &trans    &trans         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT             &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans     &trans    &trans  &trans    &trans    &trans                &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans     &trans    &trans  &trans    &trans    &kp LC(LA(DELETE))    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &trans    &trans    &trans                &trans     &trans     &trans
            >;
        };

        bt_layer {
            bindings = <
&sys_reset   &trans        &trans        &trans        &trans        &bt BT_CLR      &trans  &trans      &trans      &trans        &trans  &sys_reset
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &bt BT_PRV  &bt BT_NXT  &out OUT_TOG  &trans  &trans
&bootloader  &trans        &trans        &trans        &trans        &trans          &trans  &trans      &trans      &trans        &trans  &bootloader
                                         &trans        &trans        &trans          &trans  &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bt {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
