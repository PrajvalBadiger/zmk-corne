/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        cut {
            bindings = <&kp K_CUT>;
            key-positions = <25 26>;
        };

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <27 26>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <28 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q  &kp W  &kp E           &kp R           &kp T                   &kp Y                   &kp U           &kp I            &kp O    &kp P     &kp BSPC
&kp ESC         &kp A  &kp S  &ht LEFT_ALT D  &ht LEFT_GUI F  &kp G                   &kp H                   &ht LEFT_GUI J  &ht RIGHT_ALT K  &kp L    &kp SEMI  &kp ENTER
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C           &kp V           &kp B                   &kp N                   &kp M           &kp COMMA        &kp DOT  &kp FSLH  &kp SINGLE_QUOTE
                              &kp LEFT_GUI    &mo 1           &ht LEFT_SHIFT SPACE    &ht LEFT_CONTROL SPACE  &mo 2           &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB  &kp N1  &kp N2  &kp N3  &kp N4         &kp N5                &kp N6    &kp N7    &kp N8  &kp N9      &kp N0             &kp DELETE
&trans   &trans  &trans  &trans  &kp BACKSPACE  &trans                &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT   &kp C_VOLUME_UP    &kp C_BRIGHTNESS_INC
&trans   &trans  &trans  &trans  &kp DELETE     &kp LA(LC(DELETE))    &trans    &trans    &trans  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_BRIGHTNESS_DEC
                         &trans  &trans         &trans                &trans    &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE   &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT             &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans      &bt BT_PRV    &bt BT_NXT    &out OUT_TOG  &trans        &kp LC(LA(DELETE))    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                        &trans        &trans        &trans                &trans     &trans     &trans
            >;
        };
    };
};
